class State{#states;constructor(){this.#states=new WeakMap}get=chart=>this.#states.get(chart)||null;set=(chart,updatedState)=>{var originalState=this.get(chart);return this.#states.set(chart,Object.assign({},originalState,updatedState)),updatedState}}class Graphic{#states;constructor(states){this.#states=states}draw=(chart,options)=>{var state=this.#states.get(chart);if(!state||!1===state.selectionXY.drawing&&!state.selectionXY.end.x||state.selectionXY.end.x===state.selectionXY.start.x)options.startDataIndex=void 0,options.endDataIndex=void 0;else{var ctx=chart.ctx,y=(ctx.save(),ctx.globalCompositeOperation="xor",ctx.fillStyle=options.unselectColor,chart.chartArea.top),height=chart.chartArea.height,x1=chart.chartArea.left;let w1=state.selectionXY.start.x-chart.chartArea.left||0,x2=state.selectionXY.end.x||0,w2=chart.chartArea.right-(state.selectionXY.end.x||0);if((state.selectionXY.end.x||0)<(state.selectionXY.start.x||0)&&(w1=state.selectionXY.end.x-chart.chartArea.left||0,x2=state.selectionXY.start.x||0,w2=chart.chartArea.right-(state.selectionXY.start.x||0)),ctx.fillRect(x1,y,w1,height),ctx.fillRect(x2,y,w2,height),ctx.globalCompositeOperation="source-over",ctx.fillStyle=options.borderColor,ctx.fillRect(state.selectionXY.start.x,y,options.borderWidth,height),ctx.fillRect(state.selectionXY.end.x,y,options.borderWidth,height),options.text.enable&&(state.selectionXY.drawing||options.startDataIndex&&options.endDataIndex)){ctx.font=` ${options.text.font.size}px `+options.text.font.family,ctx.fillStyle=options.text.color;let startAxisValue=chart.data.labels[state.selectionXY.start.axisIndex];x1=chart.data.labels[state.selectionXY.end.axisIndex],height=chart.config.options.plugins.draggableSelectRange.text.callback;height&&(startAxisValue=height(startAxisValue)),ctx.fillText(startAxisValue,state.selectionXY.start.x+options.text.offset,y-options.text.padding),ctx.fillText(x1,state.selectionXY.end.x+options.text.offset,y-options.text.padding)}ctx.restore()}};getLabelXPosition=(chart,labelIndex)=>{var xScale;return!(!chart||!chart.data||!chart.data.labels||labelIndex<0||labelIndex>=chart.data.labels.length)&&(xScale=chart.scales["x-axis"]||chart.options.scales.x)&&xScale.ticks?(xScale=((chart=chart.chartArea).right-chart.left)/(xScale.ticks.count-1),chart.left+labelIndex*xScale+xScale/2):null}}let states=new State,Graphics=new Graphic(states);export default{id:"draggableSelectRange",start:(chart,args,options)=>{var canvasElement;chart?.config?.options?.plugins?.draggableSelectRange?.enable&&((canvasElement=chart.canvas).addEventListener("mousedown",e=>{var axisIndex,axisValue;0!==chart.getElementsAtEventForMode(e,"index",{intersect:!1}).length&&(axisIndex=chart.getElementsAtEventForMode(e,"index",{intersect:!1})[0].index,axisValue=chart.data.labels[axisIndex],states.set(chart,{selectionXY:{drawing:!0,start:{axisValue:axisValue,axisIndex:axisIndex,x:e.offsetX,y:e.offsetY},end:{}}}))}),window.addEventListener("mouseup",e=>{var axisElements,axisValue,state=states.get(chart);state&&!1!==state.selectionXY.drawing&&(0===(axisElements=chart.getElementsAtEventForMode(e,"index",{intersect:!1})).length?states.set(chart,{selectionXY:{drawing:!1,start:{},end:{}}}):(axisElements=0<axisElements.length?axisElements[0].index:chart.data.labels.length-1,axisValue=chart.data.labels[axisElements],state.selectionXY.start.axisValue>axisValue?(state.selectionXY.end=JSON.parse(JSON.stringify(state.selectionXY.start)),state.selectionXY.start={axisValue:axisValue,axisIndex:axisElements,x:e.offsetX,y:e.offsetY}):state.selectionXY.end={axisValue:axisValue,axisIndex:axisElements,x:e.offsetX,y:e.offsetY},state.selectionXY.drawing=!1,states.set(chart,state),chart.update(),axisValue=chart.config.options.plugins.draggableSelectRange.onSelect,chart.config.options.plugins.draggableSelectRange&&(options.startDataIndex=state.selectionXY.start.axisIndex,options.endDataIndex=state.selectionXY.end.axisIndex),axisValue&&axisValue({range:[state.selectionXY.start.axisValue,state.selectionXY.end.axisValue],boundingBox:[state.selectionXY.start,[state.selectionXY.end.x,state.selectionXY.start.y],state.selectionXY.end,[state.selectionXY.start.x,state.selectionXY.end.y]]})))}),canvasElement.addEventListener("mousemove",e=>{var axisElements,axisValue,state=states.get(chart);state&&!1!==state.selectionXY.drawing&&(axisElements=0<(axisElements=chart.getElementsAtEventForMode(e,"index",{intersect:!1})).length?axisElements[0].index:chart.data.labels.length-1,axisValue=chart.data.labels[axisElements],state.selectionXY.end={axisValue:axisValue,axisIndex:axisElements,x:e.offsetX,y:e.offsetY},chart.render(),states.set(chart,state))}))},afterDraw:(chart,args,options)=>{Graphics.draw(chart,options)},setRange(chart,options,range){let startIndex=0,endIndex=0,i=0;for(;i<chart.data.labels.length;i++)if(range[0]===chart.data.labels[i]){startIndex=i;break}for(;i<chart.data.labels.length;i++)if(range[1]===chart.data.labels[i]){endIndex=i;break}return options.startDataIndex=startIndex,options.endDataIndex=endIndex,states.set(chart,{selectionXY:{drawing:!1,start:{axisValue:range[0],axisIndex:startIndex,x:Graphics.getLabelXPosition(chart,startIndex),y:0},end:{axisValue:range[1],axisIndex:endIndex,x:Graphics.getLabelXPosition(chart,endIndex),y:chart.chartArea.height}}}),this.defaults.startDataIndex=range[0],this.defaults.endDataIndex=range[1],Graphics.draw(chart,options),chart.render(),chart.update(),[startIndex,endIndex]},clearDraw(chart){states.set(chart,{selectionXY:{drawing:!1,start:{},end:{}}}),chart.render()},defaults:{enable:!1,unselectColor:"rgba(255,255,255,0.65)",borderColor:"#2388FF",borderWidth:2,startDataIndex:void 0,endDataIndex:void 0,text:{enable:!0,color:"#000",offset:0,padding:0,font:{family:"Arial",size:13}}}};